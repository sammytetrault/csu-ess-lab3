[
  {
    "objectID": "lab-03.html",
    "href": "lab-03.html",
    "title": "Lab 3: COVID-19",
    "section": "",
    "text": "Libraries\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(flextable)\n\n\nAttaching package: 'flextable'\n\nThe following object is masked from 'package:purrr':\n\n    compose\n\nlibrary(zoo)\n\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\nlibrary(dplyr)\nlibrary(lubridate)\n\n\n\nQuestion 1: Public Data\n\ncovid_data &lt;- read.csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv\")\n\n\n\nQuestion 2: Daily Summary\n\n## create data object\nmy.date &lt;- as.Date(\"2022-02-01\")\n\n## create state object\nmy.state &lt;- \"Colorado\"\n\n## filter data to Colorado & add new columns\ncolorado_data &lt;- covid_data |&gt;\n  filter(state == \"Colorado\") |&gt;\n  arrange(county, date) |&gt;\n  group_by(county) |&gt;\n  mutate(\n    new_cases = replace_na(cases - lag(cases), 0),\n    new_deaths = replace_na(cases - lag(cases), 0),\n    cumulative_cases = cumsum(new_cases)) |&gt;\n  ungroup()\n\ntop_cumulative &lt;- colorado_data |&gt;\n  filter(date == my.date)|&gt;\n  arrange(desc(cumulative_cases)) |&gt;\n  slice_max(cumulative_cases, n = 5) |&gt;\n  select(\"date\", \"county\", \"cumulative_cases\")\n\ntop_new &lt;- colorado_data |&gt;\n  filter(date == my.date) |&gt;\n  arrange(desc(new_cases)) |&gt;\n  slice_max(new_cases, n =5) |&gt;\n  select(\"date\", \"county\", \"new_cases\")\n\ncumulative_flx &lt;- flextable(top_cumulative) |&gt;\n  flextable::set_caption(\"Top 5 Colorado Counties Cumulative Covid Cases As of Date\")\n\nnew_flx &lt;- flextable(top_new) |&gt;\n  flextable::set_caption(\"Top 5 Colorado Counties New Covid Cases As of Date\")\n\nprint(cumulative_flx)\n\na flextable object.\ncol_keys: `date`, `county`, `cumulative_cases` \nheader has 1 row(s) \nbody has 5 row(s) \noriginal dataset sample: \n        date    county cumulative_cases\n1 2022-02-01   El Paso           170672\n2 2022-02-01    Denver           159020\n3 2022-02-01  Arapahoe           144254\n4 2022-02-01     Adams           126766\n5 2022-02-01 Jefferson           113239\n\nprint(new_flx)\n\na flextable object.\ncol_keys: `date`, `county`, `new_cases` \nheader has 1 row(s) \nbody has 5 row(s) \noriginal dataset sample: \n        date    county new_cases\n1 2022-02-01   El Paso       630\n2 2022-02-01  Arapahoe       401\n3 2022-02-01    Denver       389\n4 2022-02-01     Adams       326\n5 2022-02-01 Jefferson       291\n\n\n\n\nQuestion 3: Normalizing Data\n\npop_data &lt;- read_csv(\"https://www2.census.gov/programs-surveys/popest/datasets/2020-2023/counties/totals/co-est2023-alldata.csv\")\n\nRows: 3195 Columns: 67\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): SUMLEV, STATE, COUNTY, STNAME, CTYNAME\ndbl (62): REGION, DIVISION, ESTIMATESBASE2020, POPESTIMATE2020, POPESTIMATE2...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n## I checked the structure of the data, STATE and COUNTY are already chrs, no need to convert\n# str(pop_data)\n\npop_data &lt;- pop_data |&gt;\n  mutate(STATE = as.character(STATE),\n         COUNTY = as.character(COUNTY)) |&gt;\n  mutate(STATE = sprintf(\"%02s\", STATE),\n         COUNTY = sprintf(\"%03s\", COUNTY),\n         FIP = paste0(STATE, COUNTY)) |&gt;\n  select(\"FIP\", contains(\"NAME\"), contains (\"2021\"), \"STATE\", \"COUNTY\") |&gt;\n  filter(COUNTY != \"000\")\n\nstr(pop_data)\n\ntibble [3,144 × 21] (S3: tbl_df/tbl/data.frame)\n $ FIP                  : chr [1:3144] \"01001\" \"01003\" \"01005\" \"01007\" ...\n $ STNAME               : chr [1:3144] \"Alabama\" \"Alabama\" \"Alabama\" \"Alabama\" ...\n $ CTYNAME              : chr [1:3144] \"Autauga County\" \"Baldwin County\" \"Barbour County\" \"Bibb County\" ...\n $ POPESTIMATE2021      : num [1:3144] 59203 239439 24533 22359 59079 ...\n $ NPOPCHG2021          : num [1:3144] 288 6212 -436 171 -28 ...\n $ BIRTHS2021           : num [1:3144] 686 2337 270 240 654 ...\n $ DEATHS2021           : num [1:3144] 696 2948 390 325 875 ...\n $ NATURALCHG2021       : num [1:3144] -10 -611 -120 -85 -221 -49 -70 -593 -200 -188 ...\n $ INTERNATIONALMIG2021 : num [1:3144] 15 105 0 1 9 1 5 12 22 7 ...\n $ DOMESTICMIG2021      : num [1:3144] 242 6972 -313 254 141 ...\n $ NETMIG2021           : num [1:3144] 257 7077 -313 255 150 ...\n $ RESIDUAL2021         : num [1:3144] 41 -254 -3 1 43 4 5 86 21 2 ...\n $ GQESTIMATES2021      : num [1:3144] 484 3351 2248 1994 616 ...\n $ RBIRTH2021           : num [1:3144] 11.62 9.89 10.91 10.78 11.07 ...\n $ RDEATH2021           : num [1:3144] 11.8 12.5 15.8 14.6 14.8 ...\n $ RNATURALCHG2021      : num [1:3144] -0.169 -2.585 -4.848 -3.816 -3.74 ...\n $ RINTERNATIONALMIG2021: num [1:3144] 0.254 0.4443 0 0.0449 0.1523 ...\n $ RDOMESTICMIG2021     : num [1:3144] 4.1 29.5 -12.65 11.4 2.39 ...\n $ RNETMIG2021          : num [1:3144] 4.35 29.95 -12.65 11.45 2.54 ...\n $ STATE                : chr [1:3144] \"01\" \"01\" \"01\" \"01\" ...\n $ COUNTY               : chr [1:3144] \"001\" \"003\" \"005\" \"007\" ...\n\n\nAfter modification, we have a data from of population information from the year 2021 across counties in the United States. This includes population estimates, births, deaths, etc. Both the covid data and population data that we modified have a FIP, county, and state column (although, under different names).\n\ncolorado_pop_data &lt;- pop_data |&gt;\n  filter(STNAME == \"Colorado\")\n\nhighest_CO_pop &lt;- colorado_pop_data |&gt;\n  arrange(desc(POPESTIMATE2021)) |&gt;\n  slice_max(POPESTIMATE2021, n = 1)\n\nlowest_CO_pop &lt;- colorado_pop_data |&gt;\n  arrange(POPESTIMATE2021) |&gt;\n  slice_min(POPESTIMATE2021, n = 1)\n\nrange = highest_CO_pop$POPESTIMATE2021 - lowest_CO_pop$POPESTIMATE2021\n\nThe range of populations seen in Colorado counties in 2021 is 736,546.\n\nstr(colorado_data)\n\ntibble [49,527 × 9] (S3: tbl_df/tbl/data.frame)\n $ date            : chr [1:49527] \"2020-03-12\" \"2020-03-13\" \"2020-03-14\" \"2020-03-15\" ...\n $ county          : chr [1:49527] \"Adams\" \"Adams\" \"Adams\" \"Adams\" ...\n $ state           : chr [1:49527] \"Colorado\" \"Colorado\" \"Colorado\" \"Colorado\" ...\n $ fips            : int [1:49527] 8001 8001 8001 8001 8001 8001 8001 8001 8001 8001 ...\n $ cases           : int [1:49527] 2 3 6 6 8 10 10 10 12 14 ...\n $ deaths          : int [1:49527] 0 0 0 0 0 0 0 0 0 0 ...\n $ new_cases       : int [1:49527] 0 1 3 0 2 2 0 0 2 2 ...\n $ new_deaths      : int [1:49527] 0 1 3 0 2 2 0 0 2 2 ...\n $ cumulative_cases: int [1:49527] 0 1 4 4 6 8 8 8 10 12 ...\n\n## had to mutate the colorado_data so that the FIP column matched both and could use as join key\ncolorado_data &lt;- colorado_data |&gt;\n  mutate(FIP = sprintf(\"%05d\", fips)) |&gt;\n  mutate(FIP = as.character(FIP))\n\njoined_data &lt;- full_join(colorado_data, colorado_pop_data, by = \"FIP\")\n\njoined_data &lt;- joined_data |&gt;\n  group_by(county) |&gt;\n  mutate(\n    cumulative_per_cap = (cumulative_cases/POPESTIMATE2021),\n    new_cases_per_cap = (new_cases/POPESTIMATE2021),\n    new_deaths_per_cap = (new_deaths/POPESTIMATE2021)) |&gt;\n  ungroup()\n\nper_cap_data &lt;- joined_data |&gt;\n  filter(date == \"2021-01-01\")\n\nmost_cumulative_per_cap &lt;- per_cap_data |&gt;\n  arrange(desc(cumulative_per_cap)) |&gt;\n  slice_max(cumulative_per_cap, n = 5) |&gt;\n  select(\"date\", \"county\", \"cumulative_per_cap\")\n\nmost_new_per_cap &lt;- per_cap_data |&gt;\n  arrange(desc(new_cases_per_cap)) |&gt;\n  slice_max(new_cases_per_cap, n = 5) |&gt;\n  select(\"date\", \"county\", \"new_cases_per_cap\")\n\nmost_cumu_cap_flx &lt;- flextable(most_cumulative_per_cap) |&gt;\n  flextable::set_caption(\"Top Colorado Counties Cumulative Covid Cases Per Capita As of Date\")\n\nmost_new_cap_flx &lt;- flextable(most_new_per_cap) |&gt;\n  flextable::set_caption(\"Top Colorado Counties New Covid Cases Per Capita As of Date\")\n\nprint(most_cumu_cap_flx)\n\na flextable object.\ncol_keys: `date`, `county`, `cumulative_per_cap` \nheader has 1 row(s) \nbody has 5 row(s) \noriginal dataset sample: \n        date  county cumulative_per_cap\n1 2021-01-01 Crowley         0.28927637\n2 2021-01-01    Bent         0.21071362\n3 2021-01-01   Logan         0.15457488\n4 2021-01-01 Lincoln         0.14288325\n5 2021-01-01 Fremont         0.09505047\n\nprint(most_new_cap_flx)\n\na flextable object.\ncol_keys: `date`, `county`, `new_cases_per_cap` \nheader has 1 row(s) \nbody has 5 row(s) \noriginal dataset sample: \n        date   county new_cases_per_cap\n1 2021-01-01     Bent       0.016669788\n2 2021-01-01 Sedgwick       0.003439381\n3 2021-01-01  Chaffee       0.002634112\n4 2021-01-01  Crowley       0.002266783\n5 2021-01-01  Mineral       0.002152853\n\n\n\n\nQuestion 5: Death toll\n\ncovid_death_data &lt;- joined_data |&gt;\n  filter(date &gt;= \"2021-01-01\" & date &lt;= \"2021-12-31\") |&gt;\n  group_by(county) |&gt;\n  mutate(cumulative_deaths = cumsum(new_deaths)) |&gt;\n  ungroup()\n\nbeginning_deaths &lt;- covid_death_data |&gt;\n  group_by(county) |&gt;\n  filter(date == \"2021-01-01\") |&gt;\n  select(cumulative_deaths, county) |&gt;\n  mutate(beginning_cumulative_deaths = cumulative_deaths) |&gt;\n  ungroup()\n\nending_deaths &lt;- covid_death_data |&gt;\n  filter(date == \"2021-12-31\") |&gt;\n  group_by(county) |&gt;\n  select(cumulative_deaths, county) |&gt;\n  mutate(end_cumulative_deaths = cumulative_deaths) |&gt;\n  ungroup()\n\ncovid_death_data &lt;- full_join(covid_death_data, beginning_deaths, by = \"county\")\n\ncovid_death_data &lt;- full_join(covid_death_data, ending_deaths, by = \"county\")\n\ncovid_death_data &lt;- covid_death_data |&gt;\n  group_by(county)|&gt;\n  mutate(deaths_from_covid = end_cumulative_deaths - beginning_cumulative_deaths,\n         ratio = deaths_from_covid/DEATHS2021)"
  }
]